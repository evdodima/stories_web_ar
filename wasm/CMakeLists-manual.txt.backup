# WebAR WASM Engine - CMake Build Configuration
cmake_minimum_required(VERSION 3.15)
project(webar_engine)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Source files
set(SOURCES
    src/ar_engine.cpp
    src/feature_detector.cpp
    src/optical_flow_tracker.cpp
    src/target_manager.cpp
    src/memory_pool.cpp
    src/api.cpp
)

# Header files
set(HEADERS
    include/ar_engine.hpp
    include/feature_detector.hpp
    include/optical_flow_tracker.hpp
    include/target_manager.hpp
    include/memory_pool.hpp
)

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Find OpenCV (Emscripten build)
# You need to build OpenCV for Emscripten and set OpenCV_DIR
# Or use pre-built OpenCV.js static libraries
set(OpenCV_DIR "${CMAKE_CURRENT_SOURCE_DIR}/opencv" CACHE PATH
    "Path to OpenCV build for Emscripten")

# Try to find OpenCV
find_package(OpenCV QUIET)

if(NOT OpenCV_FOUND)
  message(STATUS "OpenCV not found, will use manual linking")
  # Manual OpenCV library setup for Emscripten
  set(OpenCV_LIBS
      opencv_core
      opencv_imgproc
      opencv_features2d
      opencv_video
      opencv_calib3d
  )
endif()

# Create WASM library
add_executable(webar_engine ${SOURCES} ${HEADERS})

# Link OpenCV libraries
if(OpenCV_FOUND)
  target_link_libraries(webar_engine ${OpenCV_LIBS})
else()
  # Link against manual OpenCV libs
  target_link_directories(webar_engine PRIVATE
      ${CMAKE_CURRENT_SOURCE_DIR}/opencv/lib)
  target_link_libraries(webar_engine ${OpenCV_LIBS})
endif()

# Emscripten-specific settings
if(EMSCRIPTEN)
  set(CMAKE_EXECUTABLE_SUFFIX ".js")

  # Compiler flags
  set_target_properties(webar_engine PROPERTIES
      COMPILE_FLAGS "-O3 -msimd128 -fno-exceptions -fno-rtti"
  )

  # Linker flags
  set(EMSCRIPTEN_LINK_FLAGS
      "-O3"
      "-s WASM=1"
      "-s MODULARIZE=1"
      "-s EXPORT_NAME='createWebarModule'"
      "-s ALLOW_MEMORY_GROWTH=1"
      "-s INITIAL_MEMORY=67108864"  # 64MB initial
      "-s MAXIMUM_MEMORY=268435456"  # 256MB max
      "-s EXPORTED_RUNTIME_METHODS=['cwrap','ccall']"
      "-s EXPORTED_FUNCTIONS=['_malloc','_free','_onModuleLoaded']"
      "--bind"  # Enable Embind
      "-s ASSERTIONS=0"
      "-s DISABLE_EXCEPTION_CATCHING=1"
      "-s NO_FILESYSTEM=1"
      "-s ENVIRONMENT=web"
      "-s MALLOC=emmalloc"
      # Performance optimizations
      "-s AGGRESSIVE_VARIABLE_ELIMINATION=1"
      # Debug options (comment out for production)
      # "-s ASSERTIONS=1"
      # "-s SAFE_HEAP=1"
      # "-g4"
      # "--source-map-base http://localhost:8000/"
  )

  # Join flags into single string
  string(REPLACE ";" " " EMSCRIPTEN_LINK_FLAGS_STR "${EMSCRIPTEN_LINK_FLAGS}")
  set_target_properties(webar_engine PROPERTIES
      LINK_FLAGS "${EMSCRIPTEN_LINK_FLAGS_STR}"
  )

  # Output to public/wasm directory
  set_target_properties(webar_engine PROPERTIES
      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../public/wasm"
  )

  # Copy WASM file to output directory (handled automatically)

endif()

# Installation
install(TARGETS webar_engine
    RUNTIME DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/../public/wasm
)

# Print configuration summary
message(STATUS "")
message(STATUS "WebAR Engine Configuration:")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  OpenCV Dir: ${OpenCV_DIR}")
message(STATUS "  OpenCV Found: ${OpenCV_FOUND}")
message(STATUS "  Output Directory: ${CMAKE_CURRENT_SOURCE_DIR}/../public/wasm")
message(STATUS "")
